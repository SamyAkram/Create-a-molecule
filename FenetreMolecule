import javax.swing.*;
import java.awt.*;
import java.awt.event.*;


public class FenetreMolecule2 extends JFrame implements ActionListener {
	private JPanel panel;
	private JPanel bigPanel;
	///private JPanel littlePanel;
	private Font police5;
    private JLabel build;
    private JComboBox molecule;
    private JLabel atoms;
    private JLabel car;
    private JButton carbon;
    private JButton oxygen;
    private JButton hydrogen;
    private JButton nitrogen;
    private JButton hint;
    private JButton submit;
    private JButton trash;
    private JLabel points;
    private int score;
    private int c;
    private int o;
    private int h;
    private int n;
    private JLabel cCount;
    private JLabel oCount;
    private JLabel hCount;
    private JLabel nCount;
    ///private JLabel addMsg;

    public FenetreMolecule2 (){
		
        //window definition
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        ///this.setBounds(0,0,screenSize.width,screenSize.height); //window appears at the size of the screen
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);            //window appears at the size of the screen
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);    //closes window when cross button is clicked   
        
        //initialisation of the score
        score=0;
        //initialization of the number of atoms chosen
        c=0;  
        o=0;
        h=0;
        n=0;
        
        //different font styles used for the text parts
        Font police = new Font("Broadway",Font.BOLD,80);
        Font police2 = new Font("Serif",Font.BOLD,40); 
        Font police3 = new Font("Serif",Font.BOLD,30); 
		Font police4 = new Font("Arial",Font.BOLD,20); 
		police5=new Font("Times new roman",Font.BOLD,50);
		
        //general panel
        panel=new JPanel();
        panel.setBounds(0,0,screenSize.width,screenSize.height);
        panel.setLayout(null);
        panel.setBackground(new Color(120,165,200));

        //title of the game
        build = new JLabel();
        build.setFont(police);
        build.setText("Build A Molecule!");
        build.setBounds(100,25,1200,150);
        build.setForeground(new Color (175,215,250));
        
        panel.add(build);
             
        //panel to display the molecule being built
        bigPanel= new JPanel();
        bigPanel.setBounds(50,200,1100,700);
        bigPanel.setLayout(null);
        
        panel.add(bigPanel);
        
        //panel to display the atoms of the molecule being built (to keep the bounds set for the atom buttons but display them in the middle of the big panel)
        ///littlePanel= new JPanel();
        ///littlePanel.setBounds(212,200,675,200);
        ///littlePanel.setLayout(null);
        
        ///bigPanel.add(littlePanel);
        
        //panel that gathers the combo box features 
        JPanel combo = new JPanel();
        combo.setLayout(null);
        combo.setBounds(1200,200,675,150);
        combo.setBackground(new Color(175,215,250));
        
        panel.add(combo);
        
        //message for the combo box (telling the user to choose a molecule to build)
        JLabel messageChoose = new JLabel("Choose your molecule!");
        messageChoose.setFont(police2);
        messageChoose.setForeground(Color.white);
        messageChoose.setBounds(50,10,600,50);

        combo.add(messageChoose);
        
        //"menu d√©roulant" for the user to choose the molecule they want to build
        String[] moleculesList = { "dioxygen", "carbon dioxyde" ,  "water", "glucose", "red wine", "guanine", "cytosine", "thymine", "adenine" };
        molecule = new JComboBox(moleculesList);
        molecule.setBounds(75,75,540,40);
        molecule.setFont(police4);
        
        combo.add(molecule);
        molecule.addActionListener(this); //to verify when user has chosen a molecule to build
        
        //panel that gathers the atom features
        JPanel atomContainer = new JPanel();
        atomContainer.setLayout(null);
        atomContainer.setBounds(1200,400,675,200);
        atomContainer.setBackground(new Color(175,215,250));
        
        panel.add(atomContainer); 

		//message for the atom buttons (telling the user which atoms they dispose of)
        atoms = new JLabel("Here are the atoms you can use!");
        atoms.setFont(police2); 
        atoms.setBounds(50,20,600,50);
        atoms.setForeground(Color.white);
        
        atomContainer.add(atoms);

        //definition of the atom buttons 
        car = new JLabel(new ImageIcon("c.png"));
        car.setBounds(85,90,100,100);
        
        carbon = new JButton(new ImageIcon("c.png"));
        carbon.setBounds(85,90,77,77);
       
        oxygen = new JButton(new ImageIcon("o.png") );
        oxygen.setBounds(235,90,77,77);
       
        hydrogen = new JButton(new ImageIcon("h.png"));
        hydrogen.setBounds(385,90,77,77);
        
        nitrogen = new JButton(new ImageIcon("n.png"));
        nitrogen.setBounds(535,90,77,77);
        
        //adding the atoms buttons in their dedicated container
        atomContainer.add(carbon);
        atomContainer.add(oxygen);
        atomContainer.add(hydrogen);
        atomContainer.add(nitrogen);
        
        //to make the atoms buttons invisible but still available and only keep the pictures on them
        ///car.setOpaque(false);
		///car.setContentAreaFilled(false);
		///car.setBorderPainted(false);
        carbon.setOpaque(false);
		carbon.setContentAreaFilled(false);
		carbon.setBorderPainted(false);
		oxygen.setOpaque(false);
		oxygen.setContentAreaFilled(false);
		oxygen.setBorderPainted(false);
		hydrogen.setOpaque(false);
		hydrogen.setContentAreaFilled(false);
		hydrogen.setBorderPainted(false);
		nitrogen.setOpaque(false);
		nitrogen.setContentAreaFilled(false);
		nitrogen.setBorderPainted(false);
        
        //to verify when user clicks on a button
        carbon.addActionListener(this);
        oxygen.addActionListener(this);
        hydrogen.addActionListener(this);
        nitrogen.addActionListener(this);
        
        //panel that gathers the hint features
        JPanel hintContainer = new JPanel();
        hintContainer.setLayout(null);
        hintContainer.setBounds(1200,650,300,250);
        hintContainer.setBackground(new Color(175,215,250));
        
        panel.add(hintContainer);
        
        //hint features (message + button)
        JLabel Hint = new JLabel("Need Help?");
        Hint.setFont(police2); 
        Hint.setForeground(Color.white);
        Hint.setBounds(50,25,200,50);
        
        hint = new JButton("Hint");
        hint.setFont(police3); 
        hint.setBounds(50,100,200,90);
        hint.setBackground(new Color(120,165,200));
        hint.setForeground(Color.white);
                                
        hintContainer.add(hint);
        hintContainer.add(Hint);
        hint.addActionListener(this);
        
        //panel that gathers the submit features (trash button + submit button)
        JPanel submitContainer = new JPanel();
        submitContainer.setLayout(null);
        submitContainer.setBounds(1525,650,350,250);
        submitContainer.setBackground(new Color(175,215,250));
        
        panel.add(submitContainer);
        
        //trash button
        trash = new JButton(new ImageIcon("trashcan.png"));
        trash.setBounds(210,65,120,120);
                
        trash.setOpaque(false);
		trash.setContentAreaFilled(false);
		trash.setBorderPainted(false);
        
        submitContainer.add(trash);
        trash.addActionListener(this);
        
        //submit button
        submit = new JButton("Submit");
        submit.setFont(police3);
        submit.setBounds(40,75,150,100);
        submit.setBackground(new Color(120,165,200));
        submit.setForeground(Color.white);
                        
        submitContainer.add(submit);
        submit.addActionListener(this);
        
        //points display
        points=new JLabel("Points: 0");
        points.setFont(police2);
        points.setBounds(10,650,200,50);
        points.setForeground(Color.red);
        
        bigPanel.add(points); 
        
        //display of number of times the atom was chosen by the user
        cCount=new JLabel();
	    cCount.setBounds(110,10,50,50);
	    cCount.setFont(police5);
	    bigPanel.add(cCount); 
	    
	    oCount=new JLabel();
	    oCount.setBounds(260,10,50,50);
	    oCount.setFont(police5);
	    bigPanel.add(oCount);
	    
	    hCount=new JLabel();
	    hCount.setBounds(410,10,50,50);
	    hCount.setFont(police5);
	    bigPanel.add(hCount);
	    
	    nCount=new JLabel();
	    nCount.setBounds(560,10,50,50);
	    nCount.setFont(police5); 
	    bigPanel.add(nCount); 
	    
	    //message to tell user to click on atom icon on dipslay panel to add more of this atom
	    ///addMsg=new JLabel();
	    ///addMsg.setBounds(70,160,650,50);
	    ///addMsg.setFont(police4);
	    ///littlePanel.add(addMsg);
                
        this.add(panel);
        this.setVisible(true); //make the window containing all the features of the game visible
   }
   public void actionPerformed(ActionEvent e){
	   
	   //code to display a hint message or picture depending on the molecule chosen
	   String s=(String) molecule.getSelectedItem(); //gets the molecule chosen in the combo box as a string element
	   if (e.getSource()==hint){
		   hintMessage(s);	    
	   }
	   
	   //code to compare the molecule submitted with the one in the molecule bank
	   if (e.getSource()==submit){
	   ///molecule built compareTo molecule chosen
			winOrLose(true);  ///remove true once test works
			///compareTo(c,o,h,n);
	   }
		
	   //code to delete all atoms displayed on panel when trash button is clicked
	   if(e.getSource()==trash){
	   ///clear panel
	   ///bigPanel.trash();
	   }
			   
	   //code to display atom clicked by user
	   if(e.getSource()==carbon){
           atomClicked("c");
	   }
	   if(e.getSource()==oxygen){
		   atomClicked("o");
	   }
	   if(e.getSource()==hydrogen){
		   atomClicked("h");
	   }
	   if(e.getSource()==nitrogen){
		   atomClicked("n");
	   }
		   
   }
   
   //method to display atom clicked by the user and increase the count each time the user clicks on it
   public void atomClicked(String k){
	   ///addMsg.setText("click on this icon now if you want to add more of this atom!");
	   switch (k) {
		   case "c":
			   c++;		 
			   bigPanel.add(car);
			   cCount.setText(""+c);
			   break;
		   case "o":
			   o++;			   
			   bigPanel.add(oxygen);
			   oCount.setText(""+o);
			   break;
		   case "h":
			   h++;			   
			   bigPanel.add(hydrogen);
			   hCount.setText(""+h);
			   break;
		   case "n":
			   n++;			   
			   bigPanel.add(nitrogen);
			   nCount.setText(""+n);
			   break;
	   }
   }
   
   //method to check if submitted molecule corresponds to the one chosen in the database and add a point if it is correct
   public void winOrLose(boolean a){  ///remove boolean once test works
	   if(a==true){  ///if compareTo==true (compare molecule submitted to molecule of database)
		   score++;
		   JFrame win=new JFrame();
		   win.setBounds(700,400,500,300);
		   win.getContentPane().setBackground(new Color(155,210,120));
	       win.setVisible(true);	
	       
	       JLabel winMsg=new JLabel(new ImageIcon("win.jpg"));
	       win.add(winMsg);
		   
	   }else{     //if the molecule submitted does not correspond to the one chosen
		   JFrame lose=new JFrame();
		   lose.setBounds(650,300,550,500);
		   lose.getContentPane().setBackground(Color.red);
	       lose.setVisible(true);	
	       
	       JLabel loseMsg=new JLabel(new ImageIcon("lose.jpg"));	       
	       lose.add(loseMsg);
	   }
		   
	   points.setText("Points : "+ score); //adds a point if it is correct
   }

   //method to determine which message or picture to display for the hint depending on the molecule chosen by the user
   public void hintMessage(String s){
	   
	   //creation of a new window to display the hint
	   JFrame fr=new JFrame();
	   fr.setBounds(550,300,650,400);
	   fr.getContentPane().setBackground(new Color(255,225,105));
	   fr.setVisible(true);	
	   fr.setAlwaysOnTop(true);
	   Font police5=new Font("Times new roman",Font.BOLD,30);
	   
	   switch (s) { //check for a match 
			case "dioxygen":
			   JLabel dioxHint= new JLabel("  Come on just think, the answer is in the name!"); //if the molecule chosen was dioxygen and the user clicks on hint, this message will be displayed
			   dioxHint.setBounds(75,200,150,200);
			   dioxHint.setFont(police5);
			   fr.add(dioxHint);
			   break;
			case "carbon dioxyde":
			   JLabel cdioxHint= new JLabel("  Come on just think, the answer is in the name!");
			   cdioxHint.setBounds(75,200,150,200);
			   cdioxHint.setFont(police5);
			   fr.add(cdioxHint);
			   break;
			
			case "water":
			   JLabel waterHint= new JLabel("   Two snowballs and a clown nose...");
			   waterHint.setBounds(75,200,150,200);
			   waterHint.setFont(police5);
			   fr.add(waterHint);
			   break;
			
			case "glucose":
			   JLabel glucHint= new JLabel(new ImageIcon ("glucose.png"));
			   glucHint.setBounds(25,25,600,350);
			   fr.add(glucHint);
			   break;
		   
			case "red wine":
			   JLabel wineHint= new JLabel(new ImageIcon ("wine.png"));
			   wineHint.setBounds(25,25,600,350);
			   fr.add(wineHint);
			   break;
		
		    case "guanine":
			   JLabel guanHint= new JLabel(new ImageIcon ("guanine.png"));
			   guanHint.setBounds(25,25,600,350);
			   fr.add(guanHint);
			   break;
			   
		    case "cytosine":
			   JLabel cytoHint= new JLabel(new ImageIcon ("cytosine.png"));
			   cytoHint.setBounds(25,25,600,350);
			   fr.add(cytoHint);
			   break;
			   
		    case "thymine":
			   JLabel thymHint= new JLabel(new ImageIcon ("thymine.png"));
			   thymHint.setBounds(25,25,600,350);
			   fr.add(thymHint);
			   break;
			   
		    case "adenine":
			   JLabel adeHint= new JLabel(new ImageIcon ("adenine.png"));
			   adeHint.setBounds(25,25,600,350);
			   fr.add(adeHint);
			   break;
		}	
			
	}
	//paint method to display atoms chosen by user to build the molecule
	///public void paint(Graphics g){
		///clear all atoms on panel
		///add atom chosen in atom container
   
  }
